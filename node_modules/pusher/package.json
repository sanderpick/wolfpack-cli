{
  "name": "pusher",
  "description": "Node library for the Pusher server API",
  "version": "0.1.2",
  "author": {
    "name": "Pusher",
    "email": "support@pusher.com"
  },
  "contributors": [
    {
      "name": "fabrik42",
      "email": "fabrik42@gmail.com"
    },
    {
      "name": "Jaewoong Kim",
      "email": "jwoongkim@gmail.com"
    },
    {
      "name": "Phil Leggetter",
      "email": "phil@leggetter.co.uk"
    }
  ],
  "dependencies": {
    "request": "=2.9.203"
  },
  "devDependencies": {
    "vows": "=0.7.0"
  },
  "keywords": [
    "pusher",
    "websockets",
    "realtime"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/pusher/pusher-node-server"
  },
  "main": "index",
  "engines": {
    "node": ">= 0.4.3"
  },
  "readme": "# Pusher node.js Server library\n\nThis is a node.js library for interacting with the Pusher REST API.\n\nRegistering at <http://pusher.com> and use the application credentails within your app as shown below.\n\n## Installation\n```\n$ npm install pusher\n```\n\n## How to use\n\n### Constructor\n\n```javascript\nvar Pusher = require('pusher');\n\nvar pusher = new Pusher({\n  appId: 'YOUR_PUSHER_APP_ID',\n  key: 'YOUR_PUSHER_APP_KEY',\n  secret: 'YOUR_PUSHER_SECRET_KEY'\n});\n\nvar channel = 'lobby';\nvar event = 'message';\nvar data = {\n  from: 'Jaewoong',\n  content: 'Hello, World'\n};\n```\n\n### Publishing/Triggering events\n\nTo trigger an event on one or more channels use the trigger function.\n\n#### A single channel\n\n```\npusher.trigger( 'channel-1', 'test_event', { message: \"hello world\" } );\n```\n\n#### Multiple channels\n\n```\npusher.trigger( [ 'channel-1', 'channel-2' ], 'test_event', { message: \"hello world\" } );\n```\n\n### Excluding event recipients\n\nIn order to avoid the person that triggered the event also receiving it the `trigger` function can take an optional `socketId` parameter. For more informaiton see: <http://pusher.com/docs/publisher_api_guide/publisher_excluding_recipients>.\n\n```\nvar socketId = '1302.1081607';\n\npusher.trigger(channel, event, data, socketId);\n```\n\n### Authenticating Private channels\n\nTo authorise your users to access private channels on Pusher, you can use the `auth` function:\n\n```\nvar auth = pusher.auth( socketId, channel );\n```\n\nFor more information see: <http://pusher.com/docs/authenticating_users>\n\n### Authenticating Presence channels\n\nUsing presence channels is similar to private channels, but you can specify extra data to identify that particular user:\n\n```\nvar channelData = {\n\tuser_id: 'unique_user_id',\n\tuser_info: {\n\t  name: 'Phil Leggetter'\n\t  twitter_id: '@leggetter'\n\t}\n};\nvar auth = pusher.auth( socketId, channel, channelData );\n```\n\nThe `auth` is then returned to the caller as JSON.\n\nFor more information see: <http://pusher.com/docs/authenticating_users>\n\n## Tests\n\nThe tests run using [Vows](http://vowsjs.org/) and were added in 0.0.3. To run:\n\n1. `cp tests/config.example.json tests/config.json` and update with your own Pusher application credentials.\n2. `npm update` to ensure you have vows in `node_modules`\n3. Run the tests using `node_modules/vows/bin/vows tests/*/.js`\n\n## Credits\n\nThis library is based on the work of:\n* Christian BÃ¤uerlein and his library pusher.\n* Jaewoong Kim and the node-pusher library.\n\n## License\n\nThis code is free to use under the terms of the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "pusher@0.1.2",
  "_from": "pusher"
}

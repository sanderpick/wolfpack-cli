var HTTPS = require('https');
var QueryString = require('querystring');

/**
 * Facebook API Wrapper
 * @constructor
 * @param {Object} info Info about a Facebook application
 */
var Client = function (info) {
	if (!info.KEY || !info.SECRET || !info.ID) {
		throw new Error('Missing some info');
	}

	this.info = info;
	this.access_token = null;
};

/**
 * Performs a GET request to Facebook API with proper parameters
 * @param {string} uri The URI from which to request data
 * @param {Object=} params Request parameters
 * @param {function(?Error, ?Object)} callback A callback function
 */
Client.prototype.get = function (uri, params, callback) {
	if (typeof arguments[1] === 'function') {
		callback = arguments[1];
		params = {};
	} else {
		params = params || {};
	}

	// build a complete pathname
	uri = this.getURI(uri, params);

	// choose a hostname according to the URI format
	var host = /^\/method\//.test(uri) ? 'graph.facebook.com' : 'api.facebook.com';
	var req = HTTPS.request({
		'method': 'GET',
		'host': host,
		'port': 443,
		'path': uri
	}, function (res) {
		var data = '';
		res.setEncoding('utf8');
		res.on('data', function (chunk) {
			data += chunk;
		});
		res.on('end', function () {
			try {
				var result = JSON.parse(data);
				callback(result.error || null, result.data || result);
			} catch (err) {
				callback(res.statusCode !== 200, result || null);
			}
		});
	});
	req.on('error', function (err) {
		callback(err);
	});
	req.end();
};

/**
 * Build a complete URI
 * @param {string} uri The pathname to use
 * @param {!Object} params The parameters to use
 * @param {boolean=} abs Whether to return an absolute URI
 * @return {string}
 */
Client.prototype.getURI = function (uri, params, abs) {
	uri = (uri[0] !== '/') ? '/' + uri : uri;

	params.format = params.format || 'json';
	params.locale = params.locale || 'en_US';

	if (!params.client_id) {
		var authenticating = /^\/oauth\//.test(uri) || /^\/dialog\//.test(uri);
		if (authenticating) {
			params.client_id = this.info.KEY;
		}
	}
	if (!params.client_secret && uri === '/oauth/access_token') {
		params.client_secret = this.info.SECRET;
	}
	if (!params.access_token && this.access_token) {
		params.access_token = this.access_token;
	}

	var search = QueryString.stringify(params);
	var relative = uri + (search ? '?' + search : '');

	if (abs) {
		var subdomain = 'graph';
		if (/^\/method\//.test(uri)) {
			subdomain = 'api';
		} else if (/^\/dialog\//.test(uri)) {
			subdomain = 'www';
		}
		return 'https://' + subdomain + '.facebook.com' + relative;
	}

	return relative;
};

/**
 * Requests an access token to use when performing operations on a user's behalf
 * @param {Object} params Parameters to use
 * @param {function(string)} callback A callback function
 */
Client.prototype.getAccessToken = function (params, callback) {
	this.get('/oauth/access_token', params, function (err, data) {
		if (!err) {
			var result = QueryString.parse(data);
			callback(null, result.access_token);
		} else {
			callback(err, null);
		}
	});
};

/**
 * Requests an application access token to use when managing the application
 * @param {function(string)} callback A callback function
 */
Client.prototype.getAppAccessToken = function (callback) {
	var params = {
		'client_id': this.info.ID,
		'grant_type': 'client_credentials'
	};

	this.get('/oauth/access_token', params, function (err, data) {
		if (!err) {
			var result = QueryString.parse(data);
			callback(null, result.access_token);
		} else {
			callback(err, null);
		}
	});
};


module.exports = Client;
